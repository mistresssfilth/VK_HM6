/*
 * This file is generated by jOOQ.
 */
package generated.tables.records;


import generated.tables.Invoices;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvoicesRecord extends UpdatableRecordImpl<InvoicesRecord> implements Record3<Integer, LocalDate, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.invoices.id</code>.
     */
    public InvoicesRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.invoices.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.invoices.date</code>.
     */
    public InvoicesRecord setDate(LocalDate value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.invoices.date</code>.
     */
    public LocalDate getDate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>public.invoices.org_id</code>.
     */
    public InvoicesRecord setOrgId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.invoices.org_id</code>.
     */
    public Integer getOrgId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, LocalDate, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Invoices.INVOICES.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Invoices.INVOICES.DATE;
    }

    @Override
    public Field<Integer> field3() {
        return Invoices.INVOICES.ORG_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate();
    }

    @Override
    public Integer component3() {
        return getOrgId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate();
    }

    @Override
    public Integer value3() {
        return getOrgId();
    }

    @Override
    public InvoicesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public InvoicesRecord value2(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public InvoicesRecord value3(Integer value) {
        setOrgId(value);
        return this;
    }

    @Override
    public InvoicesRecord values(Integer value1, LocalDate value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InvoicesRecord
     */
    public InvoicesRecord() {
        super(Invoices.INVOICES);
    }

    /**
     * Create a detached, initialised InvoicesRecord
     */
    public InvoicesRecord(Integer id, LocalDate date, Integer orgId) {
        super(Invoices.INVOICES);

        setId(id);
        setDate(date);
        setOrgId(orgId);
    }

    /**
     * Create a detached, initialised InvoicesRecord
     */
    public InvoicesRecord(generated.tables.pojos.Invoices value) {
        super(Invoices.INVOICES);

        if (value != null) {
            setId(value.getId());
            setDate(value.getDate());
            setOrgId(value.getOrgId());
        }
    }
}
